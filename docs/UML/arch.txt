CanvasDrawer

'GraphSkinNamesConfig':[Subscriber, {
    "basic_skin": {"node":'circle', "label":'tahoma', "edge":'arc'}
    "light_skin": {"node":'circle', "label":'times', "edge":'line'}
}]

GraphSkinNamesConfig
  Listen
    get_skin_node_type
    get_skin_edge_type
    get_skin_label_type

CanvasDrawerNodeFactory(Publisher, {'circle':GRASP.GraphViewNodeCircle,'iconset1':GRASP.GraphViewNodeIconSet1})
CanvasDrawerNodeFactory.prototype = { getNode(config) }
CanvasDrawerEdgeFactory(Publisher, {'arc':GRASP.GraphViewEdgeArc, 'line':GRASP.GraphViewEdgeLine})
CanvasDrawerEdgeFactory.prototype = { getEdge(config) }
CanvasDrawerLabelFactory(Publisher)
CanvasDrawerLabelFactory.prototype = { getLabel(config) }

GRASP.GraphViewNodeCircle = function(){
    GRASP.CanvasDrawer.Circle.apply(this, arguments)
}

GraphView(CanvasDrawer, CanvasDrawerNodeFactory, CanvasDrawerEdgeFactory, CanvasDrawerLabelFactory){
    //create 3 layers
}
GraphView.prototype = {
    setNodes(array),
    setEdges(array),
    setNodeLayout(layout),
    setNodeLabelLayout(layout),
    setColorScheme(scheme),
    bindLayer(),
    bindShape(),
    draw(),
    destroy()
}

GraphNodeLayouts(Subscriber, GraphNodeLayoutModuleFactory){}

GraphNodeLayouts.prototype = {
    eventListener: function(event){
        case 'get_graph_node_layout':
            var module = GraphNodeLayoutModuleFactory.getGraphNodeLayoutModule(event.getData()['node_layout_name'])
            event.setResponse(module.getLayout(event.getData()['graph_tree_model']))
    }
}

GraphNodeLayoutTree = function(graph_tree_model){
    GRASP.implements(graph_tree_model, IGraphTreeModel)
}

IGraphTreeModel = {
    getRootNode,
    getLevel
    getGraphTreeDepth
    getSkeletonChildIds
}

GraphsPanelPresenter(GraphTreeModelFactory){
   GraphTreeModelFactory.getGraphTreeModel(graph_id);
}

GraphNodeLayoutGraphModelBridgeFactory = function(){}
GraphNodeLayoutGraphModelBridgeFactory.prototype = {
   getGraphModelBridge(layout_name, model){

   }
}

GraphNodeLabelLayoutGraphModelBridgeFactory = function(){}
GraphNodeLabelLayoutGraphModelBridgeFactory.prototype = {
   getGraphModelBridge(layout_name, model){

   }
}



GraphLayoutNamesConfig(Subscriber, {'basic_layout':{'GraphNodeLayoutTree':'tree','GraphNodeLabelLayoutModule':'horizontal'}})

GraphNodeLabelLayoutModuleFactory(Publisher, {'horizontal':GRASP.GraphNodeLabelLayoutHorizontal,'radial':GRASP.GraphNodeLabelLayoutRadial});
GraphNodeLabelLayoutModuleFactory.prototype = {
    getGraphNodeLabelLayoutModule();
}

GraphNodeLabelLayoutCanvasDrawerBridge = function(Publisher, CanvasDrawerLabelFactory){}
GraphNodeLabelLayoutCanvasDrawerBridge.prototype = {
   getTextListAreas(array)
   getTextArea(text){
     var skin_label_type = Publisher.dispatch('get_skin_label_type');
     var label = CanvasDrawerLabelFactory.getLabel(skin_label_type, text);
     return {"width":label.getWidth(), "height":label.getHeight()};
   }
}
GraphNodeLabelLayouts(GraphNodeLabelLayoutCanvasDrawerBridge, GraphNodeLabelLayoutModuleFactory)
GraphNodeLabelLayouts.prototype = {
 eventListener: function(event){
     case 'get_graph_node_label_layout':
         var graph_model_bridge = event.getData()['graph_model_bridge'];
         if(!this._label_areas[graph_id]) this._label_areas[graph_id] = GraphNodeLabelLayoutCanvasDrawerBridge.getTextListAreas(graph_model_bridge.getLabels());
         var module = GraphNodeLabelLayoutModuleFactory.getGraphNodeLayoutModule(event.getData()['node_label_layout_name'])
         event.setResponse(module.getLayout(this._label_areas[graph_id], graph_model_bridge))
 }
}


GraphsPanelPresenter(ViewManager, GraphsPanelView,
GraphNodeLayoutGraphModelBridgeFactory, GraphNodeLabelLayoutGraphModelBridgeFactory){

}

//подписывается на события 'graph_model_initialized', 'graph_model_changed'
//публикует события 'bind_graph_view_event',
//плюс специфические для каждого плагина вызовы типа 'get_graph_model', 'get_graph_node_layout', 'get_fish_eyed_layout'
// и т.д.
GraphViewPlugins(Subscriber, Publisher){

}

GraphViewPlugins.prototype = {

}